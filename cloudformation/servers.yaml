Description: 
  Manuel Castellin <manuel@castellinconsulting.com> Udacity DevOps Capstone Project
  An infrastructure to deploy a Kubernetes cluster with one Master node and two Minions in AWS

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resources
    Type: String
  
  KeyPairName:
    Description: The KeyPair name to use for ssh access to instances
    Type: String

  Minions:
    Description: The amount of minion nodes for the K8s cluster
    Type: Number
    Default: 1

Resources:

  EC2AdmSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to EC2 instances for administrative purposes
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  MinionSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for cluster nodes
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  MasterSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for cluster master
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"

  APIPort:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecGroup
      IpProtocol: tcp
      FromPort: 6443
      ToPort: 6443
      CidrIp: 0.0.0.0/0

  DiscoveryPort:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecGroup
      IpProtocol: tcp
      FromPort: 9898
      ToPort: 9898
      SourceSecurityGroupId: !Ref MinionSecGroup

  MasterEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  K8sMasterControlInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: A network interface for administraction traffic to k8s instances
      SubnetId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      GroupSet:
        - Ref: EC2AdmSecGroup
        - Ref: MasterSecGroup

  MasterEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt MasterEIP.AllocationId
      NetworkInterfaceId: !Ref K8sMasterControlInterface

  K8sMaster:
    DependsOn: KubernetesToken
    Type: AWS::EC2::Instance
    Description: An EC2 instance to hold the Kubernetes master node
    Properties:
      UserData:
        Fn::Base64: 
          Fn::Join:
            - |+

            - - '#!/bin/bash -ex'
              - !Join
                - ' '
                - - 'curl'
                  - 'https://raw.githubusercontent.com/mcastellin/udacity-cloud-devops-capstone/master/cloudformation/install-k8s.sh'
                  - '| sh -'
              - !Join
                - ''
                - - kubeadm init --token="
                  - !GetAtt KubernetesToken.Token
                  - >-
                    "
              - 'kubectl apply --kubeconfig /etc/kubernetes/admin.conf --namespace kube-system -f https://docs.projectcalico.org/manifests/calico.yaml'
              - 'mkdir -p /home/ubuntu/.kube'
              - 'cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config'
              - 'chown ubuntu:ubuntu /home/ubuntu/.kube/config'
      ImageId: ami-0b418580298265d5c
      KeyName: !Ref KeyPairName
      InstanceType: t3.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref K8sMasterControlInterface
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-k8s-master"

  K8sMinionsLaunchConfiguration:
    DependsOn: K8sMaster
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: 
          Fn::Join:
            - |+

            - - '#!/bin/bash -ex'
              - !Join
                - ' '
                - - 'curl'
                  - 'https://raw.githubusercontent.com/mcastellin/udacity-cloud-devops-capstone/master/cloudformation/install-k8s.sh'
                  - '| sh -'
              - !Join
                - ''
                - - kubeadm join --token="
                  - !GetAtt KubernetesToken.Token
                  - >-
                    " 
                  - !Join 
                    - ''
                    - - !GetAtt 
                        - K8sMaster
                        - PrivateIp
                      - ':6443' 
                  - ' --discovery-token-unsafe-skip-ca-verification'
              - 'mkdir -p /home/ubuntu/.kube'
              - 'cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config'
              - 'chown ubuntu:ubuntu /home/ubuntu/.kube/config'
      ImageId: ami-0b418580298265d5c
      InstanceType: t3.small
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref MinionSecGroup
        - !Ref EC2AdmSecGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  K8sMinionsAutoScalingGroup:
    DependsOn: K8sMinionsLaunchConfiguration
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
           !Sub "${EnvironmentName}-PRI-NETS"
      LaunchConfigurationName: !Ref K8sMinionsLaunchConfiguration
      MinSize: 1
      MaxSize: !Ref Minions
      DesiredCapacity: !Ref Minions
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - 'Minion - '
              - !Ref AWS::StackName
          PropagateAtLaunch: true

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: ["lambda.amazonaws.com"]
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: "lambda_policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: "arn:aws:logs:*:*:*"

  GenerateToken:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const crypto = require('crypto');
          const response = require('cfn-response');
          exports.handler = (event, context, callback) => {
              function tokenGenerator (len) {
                  return crypto.randomBytes(Math.ceil(len/2)).toString('hex').slice(0,len);
              }
              var token = tokenGenerator(6) + '.' + tokenGenerator(16)
              var responseData = {Token: token}
              return response.send(event, context, response.SUCCESS, responseData);
          };
      Handler: "index.handler"
      Runtime: "nodejs12.x"
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn

  KubernetesToken:
    Type: "Custom::GenerateToken"
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt GenerateToken.Arn 

Outputs:
  GeneratedToken:
    Description: The Kubernetes token to join the cluster
    Value: !Sub "${KubernetesToken.Token}"

